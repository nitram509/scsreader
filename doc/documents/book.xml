<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../docbook-xml-4.5/docbookx.dtd">
<article id="net.scs.reader.doc" lang="en">
	<articleinfo>
		<title>SCS Reader Documentation</title>
		<author>
			<firstname>Martin W.</firstname>
			<surname>Kirst</surname>
		</author>
		<abstract>
		<para>
			SCS Reader is an <abbrev>OSGI</abbrev> compatible Java library which is able to read,
			parse and transform <abbrev>SCS</abbrev> (<abbrev>SNA</abbrev> Character String) data streams.
			The implementation also offers some converters to transform such
			streams into Text, <abbrev>PDF</abbrev>, <abbrev>RTF</abbrev> or other formats. At the current state
			it supports all features of the <abbrev>SCS</abbrev> 5256 printer standard.
		</para>
		</abstract>
		<releaseinfo>Documentation for <ulink url="http://scsreader.sourceforge.net/">SCS Reader</ulink> project.</releaseinfo>
	</articleinfo>

	<sect1 id="sect.usage">
		<title>Usage</title>
		<para>
			This project is designed to be an easy drop in replacement for 
			projects with existing PDF view or export functionality.
			The implementation design was inspired by the
			<ulink url="http://jcp.org/en/jsr/detail?id=173">
			<productname class="trade">Java</productname> Streaming
			<abbrev>API</abbrev> for <abbrev>XML</abbrev>
			</ulink>. Thus it's fast and very flexible. Additionally, one main
			difference to any other implementation in this area is the fact,
			that the <abbrev>SCS</abbrev> data streams pretty soon are converted
			to <productname>Unicode</productname> and further processing
			is all done in unicode. Therefore it's worthwhile to use this
			library in multilingual environments.
		</para>
		
		<sect2 id="sect.exampletext">
			<title>Example Text-Printer</title>
			
			<programlistingco>
			
			<areaspec>
				<area id="ex.spooledfile" coords="18" />
				<areaset id="ex.1" coords="">
					<area id="ex.1.1" coords="1"/>
					<area id="ex.1.2" coords="2"/>
					<area id="ex.1.3" coords="3"/>
					<area id="ex.1.4" coords="4"/>
				</areaset>
			</areaspec>
			
			<programlisting language="java" format="linespecific" >
import java.io.File;
import java.io.FileWriter;

import net.scs.reader.EndOfFileSignal;
import net.scs.reader.IPrinterMicroCommand;
import net.scs.reader.IScsDataProvider;
import net.scs.reader.ReaderConfig;
import net.scs.reader.SCSStreamReader;
import net.scs.reader.dataprovider.As400ScsDataProviderFactory;
import net.scs.reader.virtualprinter.PrinterConfig;
import net.scs.reader.virtualprinter.TextPrinter;

import com.ibm.as400.access.SpooledFile;

public class ExampleTextPrinter {

	public static void main(String[] args) throws Exception {
		SpooledFile spooledFile = null; // TODO: provide your spool file!
		final IScsDataProvider dp = As400ScsDataProviderFactory.getPrintObjectDataProvider(spooledFile);
		final ReaderConfig rcfg = new ReaderConfig.Builder()
				.collectPrintableChars(true)
				.ignoreUnknownControlCodes(false)
				.ignoreNulls(false)
				.getConfig();
		final SCSStreamReader reader = new SCSStreamReader(dp, rcfg);

		PrinterConfig pcfg = PrinterConfig.getDefault();
		TextPrinter printer = new TextPrinter(pcfg);

		try {
			while (reader.hasNext()) {
				final IPrinterMicroCommand event = reader.next();
				if (event == null) break;
				printer.runMicroCommand(event);
			}
		} catch (EndOfFileSignal e) {
			System.out.println("eof.");
		}

		printer.finish();

		FileWriter fw = new FileWriter(new File("test.txt"));
		printer.writeText(fw);
		fw.close();
	}
}
			</programlisting>
			
			<calloutlist>
			<callout arearefs="ex.spooledfile">
				<para>provide your spooled file here</para>
			</callout>
			<callout arearefs="ex.1">
				<para>provide your spooled file here</para>
			</callout>
			</calloutlist>
			
			</programlistingco>
			
			<para>
			</para>
		</sect2>
		
		<sect2 id="sect.examplepdf">
			<title>Example <abbrev>PDF</abbrev>-Printer</title>
			<para>
			</para>
		</sect2>
		
	</sect1>
	
	<sect1 id="sect.development">
	<title>Development</title>
		<sect2 id="sect.projectsetup">
		<title>Project setup</title>
		<para>
			SCS Reader was developed using Eclipse IDE.
			Thus, the two plugins "net.scs.reader" and "unittest.net.scs.reader"
			are independent Eclipse projects.
		</para>
		
		<sect3 id="sect.requirements">
			<title>Requirements</title>
			<para>
			<itemizedlist>
			<listitem><para>Java v1.6+</para></listitem>
			<listitem><para>GIT, recommended as Eclipse-Plugin and command line tool</para></listitem>
			<listitem><para>Eclipse Helios (v3.6+)</para></listitem>
			</itemizedlist>
			</para>
		</sect3>
		
		<sect3 id="sect.dependencies">
			<title>Dependencies</title>
			<para>
			<itemizedlist>
			<listitem><para>JTOpen Framework v6.7+ (<ulink url="http://jt400.sourceforge.net/">http://jt400.sourceforge.net/</ulink>)</para></listitem>
			<listitem>
				<para>iText v2.1.7 (<ulink url="http://itextpdf.com/">http://itextpdf.com/</ulink>)</para>
				<warning><para>newer version 5.x is not yet supported</para></warning>
			</listitem>
			</itemizedlist>
			</para>
		</sect3>
		
		<sect3 id="sect.eclipsesetup">
			<title>Setup required libraries within Eclipse</title>
			<para>
				<orderedlist numeration="arabic">
				<listitem><para>You have to download the required libraries</para></listitem>
				<listitem><para>Create a new java project called <filename class="directory">wrapper-req-libs</filename></para></listitem>
				<listitem><para>Create a new folder <filename class="directory">lib</filename> within project <filename class="directory">wrapper-req-libs</filename></para></listitem>
				<listitem><para>Copy <filename class="libraryfile">iText.2.1.7.jar</filename> and <filename class="libraryfile">jt400.jar</filename> into the <filename class="directory">lib</filename> folder</para></listitem>
				<listitem><para>Go to properties of the wrapper project, go to <emphasis>build path</emphasis>
				                 and go to <emphasis>order and export</emphasis></para></listitem>
				<listitem><para>Check the two named libraries so that they get exported</para></listitem>
				<listitem><para>Right-Click the wrapper project, click <emphasis>Configure</emphasis>
				          and click <emphasis>Convert to Plug-in projects</emphasis></para></listitem>
				</orderedlist>
			</para>
			<para>Once you've converted the requiered <filename class="libraryfile">JARs</filename>
			      into a plugin project, your workspace should be error free and
			      you should be able to start hacking on this project.
			</para>
		</sect3>
		
		</sect2>
	</sect1>
</article>
